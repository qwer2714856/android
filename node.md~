1.概念的介绍(网络制式)
1G制式 就是大哥大，通话是锁定在一定频率，所以使用可调频电台就可以窃听通话。彻底退出历史舞台。

2G制式 GSM(移动，联通),CDMA(电信) 等数字手机,如果手机的右上角出现G这个单词是GSM 如果是E+是EDGE,没有3G网络的时候就会使用2G网络

3G制式 手机上是 3G H 3G 各个运营商之间是互相不兼容的例如说联通3G就用不了移动3G
WCDMA 联通 TD-SCDMA移动(中国和巴基斯坦，出了中国就不大行了)CDMA2000电信

4G制式 采用了 TD-LTE(移动电信联通) 和 FDD-LTE(电信联通) 两种制式。不互相兼容 
各个运营商之间的制式是不相互兼容的。3G 4G

2G/3G/4G 的区别
速度
这么理解(网络速度)
2G 相当于拨号上网(12.2K)
3G 相当于宽带(384K~2M)
4G 相当于光纤(100M理论值实际不行)


2.android  体系结构
android 的底层是linux是用 linux改出来的
android tx2.jpg
安卓用的java虚拟机是dvm

libraries 里面写的东西都是C些的
application FRAMEWORK 里面封装了很多的java API直接调用就可以api回去调用一些c的类库,就主要学习的这里

APPLICATIONS
是应用层的内容,系统已经做好的应用,删都删不掉的



=================JVM 和  DVM 的比较=================
区别
jvm
编译后file格式 .java->.class->.jar
                   jdk的javac

dvm(dalvik vm)
.java->.class->.dex->.apk

.jar
.apk 都可以用压缩工具打开

.jar包里面的类是.class
.apk里面是.dex(又且只有一个.dex classes.dex是把.class全部编译到这里面来了) 



//一个3G的单独file和一个3G的file夹里面有大量小file在同时复制的时候前面的单独file会快，因为牵扯到header的问题，大量file有大量的头，而单独就一个file头.
这可能是为什在有个.dex吧增加下效率


架构方面的问题
JVM是基于栈的架构(栈是内存中的一个东西)
DVM是基于寄存器的架构(寄存器是CPU的东西)
寄存器>内存的东西(速度快)


Android 的新虚拟机ART(将来会取代DVM)
DVM,每次运行的时候，字节码需要即时转换机器码，这会拖慢应用的运行速度。
ART应用在第一次安装的时候，字节码就会预先编译成机器码，使其成为真正的本地应用，应用的启动和执行速度都明显提升。

(Android开发者选项 选择运行环境(可以选择dalvik 和 ART))开发者选项
因为ART不够稳定所以市面上改过的android的系统基本都吧ART删掉了。
ART占用的空间多一些
原因,除了保存字节码之外，还要保存预先编译好的机器码. 浪费空间提升效率.

sdk 下载解释
Tools
    sdk工具集（这个是必须下载的）下载后保存在sdk/tools里面，这里面的工具大部分是启动android模拟器自动启动的工具。
    sdk平台工具集合
    存放在sdk/plafform-tools里面
    adb很常用手动
    aapt反汇编手动
    dexdump 打包用的系统自动调用。
Android 系统版本里面的
    SDK Platform

Android 4.3 是SDK的平台
    SDK Platform 下载SDK Platform就可以使用4.3的模拟器，下这一个就可以使用。
    下载后就会放到sdk/下面的 platform 里,(API #NO 这个是 模拟器API的一个等级，因为在android的代码中用这个等级表示模拟器的版本)
    Documentation for Android SDK:
    帮助文档，看完全版的去官方看（http://developer.android.com/reference/android/view/package-summary.html），有个搜索搜就可以。所以的话你下载一个Documentation for Android SDK 下载后在sdk目录下面的docs里面有,离线的,需要等等（断网看）。
    使用火狐的脱机工作，工具-》开发者-》最后一个WORK OFFLINE 脱机工作,放大镜是有效的。
    ARM EABI v7a System Image （cpu的镜像）（市面上的arm eabi v7a 和 intel）
    镜像，在创建虚拟机的时候除了可以选择系统还可以选在cpu的镜像，CPU的架构。
    ==inter 架构
    ==ARM EABI v7a 架构，这两需要下载一个否则创建AVD是点击不了ok的
    因为在同的cpu架构上有的代码可能执行结果会有不同的，所以提供2中架构，新的会有很多架构，最多用的inter ARM EABI 架构，虚拟用来调通业务的，真正的还是用真机测试。存放在system-image里面
    Sources for Android SDK 
    Android API 的源码 java里面可以用F3看类的源代码，但是如果在android里面要看就需要下载这个,下载后放在sources里面有各个版本的对应源代码

Extras
    Android Support Library
    Android 支持类库,是这样的例如讲，4.0发布了一个特性，如果你使用的是2.3的系统想要有这个新特性就需要将这个新特性抽出来放到jar包，然后在2.3系统导入这个jar包
    下载下来的特性放到extras android support 下面
    Intel x86 Enulator accelerator HAXM inter模拟器加速器（必装）必须是机器是inter核心的cpu i3包括i3以上的 下载在 extras intel H...里面有个安装程序，需要安装下。Android 基本所有的东西下载下来就能用，但是这个需要安装下
    安装的时候一个问题，如果碰到VT-X错误这个说明cpu支持加速器的，去BOIS里面打开。虚拟技术打开。not support就说明不支持，这些能完了选在模拟器的inter架构的模拟器

AVD
Android Virtual Device Manager
   new -> 
   android name
   Device:预制好的分辨率的屏幕（3.7 480*800 3.7是屏幕适配和屏幕密度 后面那个是分辨率）
   Target:系统版本
   cpu/ABI:架构核心，在有加速器的情况intel快，否则abi快
   Keyboard:
   Skin:
   这两个都勾上，有实体按键,有皮肤。
   front camera 前摄像头
   back Camera  emulated 模拟摄像头（可以用到一些方法），webcam0机器上的真实摄像头。
   Memory options:RAM:内存运行(可以不用改) VM HEAP 堆内存，每个应用最大占用大小。一般内存存贮空间多大就能装多大东西android不是的它有个规定值就是这个。主流128 
   这里的单位是M
   Internal Storage:这个是自带的存储空间，内部存储空间,这个必须写
   SD Card 可有可没有，写就有不写就没有.这个可以不写
   Android 可以没有SD卡但是一定有内部存储空间
   Emulation options:  snapshot 快照(类似休眠)不要就不选了  use Host GPU(如果模拟器很慢考虑用这个，使用硬件的GPU 也容易有BUG 最好也不选)

start 启动模拟器
wipe user data 恢复出厂设置
Scale display to real size 缩放显示 控制 monitor dpi 来控制缩放比例
    启动的时候有HAX is working and emulator runs is fast virt mode 是加速模式
    分辨率越大启动的越慢
    大屏幕只是用来测试不同屏幕的兼容性的。
    系统版本低运行速度快，但是高版本和低版本的代码部分是有却别的。
    两个模拟器互相打电话发短信
    自带的模拟器上面有个编号比如5556 5554 等直接拨这个就行
   

创建一个android 的项目
    Application Name 应用名字
    Project Name 项目名字
    Package Name 包名
    Mininum Required Sdk 最小运行SDK的运行版本（游戏 4.0 应用可以使用2.3）。
    剩下三个默认
    1.当前运行在哪个版本上
    2.编译用哪个版本最新的
    3.样式主题
    next
    创建一个自定义图标
    启动程序后，界面就是activeity(点上系统自定义创建一个)
    项目是否是作为一个jar包，给别人用，否则不要勾上。
    保存路径
    next
    创建图标
    有个browse选择一个就可以
    next
    系统给你创建的activeity选个
Application Name Project Name 名字一样就可以
Project Name 在项目中标示
Application Name 是在标题栏中的名字，应用在模拟器上运行启动以后在标题栏上的名字，和图标下面的那个名字。


Genymontion 启动起来了就可以直接在 android studio 里面点击run as 不用非带发布出来测试
android studio 的 android Device monitor 可以查看在线的设备
eclipse window 里找一个device就可以

项目运行在模拟器里面查看日志是用logCat


笔记软件markdownpad
================================================项目的目录结构
src:项目的java带代码都放在这里，例如自定义的类等等。
    如果创建项目的时候有Activity话，在src下面会有一个MainActivity.java, 其实这个activity 就是java类。

gen:下的BuildConfig.java（自动生成的）是配置性的东西不要改 debug = true 可以调试 false不可以调试
    R.java 自动生成的不要改 都是些资源ID

android 系统核心：下面是android的jar包。一些类都依赖于它（这个是编译版本所决定的，在建项目的时候让你选过一个编译版本）中途要改的话 右键项目名字properties-> android, 导入别人的项目先看看是不是导入了jar包

Android Dependencies:这个是低版本用高版本特性的时候的jar包，制式包。它的真实位置是在libs里面

assets 资源文件夹这个和R.java没有关系，这里存放的是视频音乐等较大的file.通过IO流来读取

bin 打包编译后的内容放到这，里面是一些dex和apk，其实是先打包成apk在往模拟器里面装。

res 存放资源的图片一类的往这放。和assets区别 assets是存放较大内容的，assets 是没有资源Id的而在res 里面的内容是有资源ID。在res里面的内容通过资源Id就可以读取不需要使用io流。这里面有大把的XML里面都在这。
drawable-hdpi
    保存图片的它的资源ID在R.java里面，如何对比的找到资源ID
    打开R.java 对应文件夹名字前半部分找到这个类，里面的变量名字对应文件名字。
    如果往里面扔新的图片会在这个R.java里面插入新的资源ID
    因为资源会写入到R文件所以一定注意文件的名字。
    后缀名字不同文件也不能相同。
drawable-ldpi
drawable-mdpi
drawable-xhdpi
drawable-xxhdpi
这些都是做屏幕适配的，他们的里面的图片根据不同屏幕会有不同尺寸的图片
==让美工准备几套图片
如果不考虑屏幕适配，放到哪个文件夹都没有问题，默认放到hdpi里面吧
学习业务逻辑就放一个行了。

layout 是布局，下面xml文件就是布局文件,android 是用xml文件作为布局文件的。
       打开以后可以预览，这里面内容和模拟器的预览是一样，但是我们模拟器运行的是active中的java文件为什么和这个一样Ok打开MainActivity.java发现有这么一句话，setContentView(R.layout.activity_main)这个是设置显示内容的，这里要传布局文件的资源ID，这个资源ID在R文件中而R文件中的关联的是layout中的那个配置文件。默认的active文件是一片空白的如果要让其显示就要让其设置使用哪个布局文件。onCreate 是在active创建的时候自动调用。点击应用图标的时候系统会自动调用active active创建的时候就调用了布局xml。

menu 配置文件夹，菜单对菜单配置点击模拟器上的menu会弹出来这个东西。

values (values R.java没有这个内部类)
    dimens.xml 定义长度的资源ID的数字+dp android中的单位类似像素那么个意思。
    dp 和 px的区别 dp是动态根据分辨率来的，android是可以用px的。
    320*480 20dp就是20px
    720*1280 20dp 肯能是40px
    strings.xml（配置字符串资源的，用来定义字符串资源的）国际化用
        有三子节点
        1.定义字符串节点，而每一个字符串节点都有一个name这个name就是资源id
在R.java里面有一个string内部类，这里面放着都是name的名字。当你想string.xml添加内容的时候它会根据你设置的name自动R.java里面写入配置。
    styles.xml
    定义样式和主题的
values多个就是多个屏幕适配，和draw一样的事情。
而且如果要定义多语言就一定有多个values每个下面都有一个strings
values-it
      -en
      -zh 等等

AndroidManifest.xml 很重要的配置文件.
    1.根节点
        <mainfest ...... package="包就是创建项目时候的那个包"
        项目的那个报名是项目而这个是应用的名字（两者没有关系），应用的唯一识别ID，就是在系统里面的ID不能有重复的ID存在，低版本的当然就被高版本覆盖掉，包名相同就覆盖掉。（应用包名和代码报名可以不同在不同的时候需要在代码包名的那个地方引入应用的包）
        android:versionCode="1" 版本号高版本覆盖低版本系统通过比对versionCode谁大谁就高版本（机器人看的）。
        
        android:versionName="1.0"> 版本名字这个是给人看的

<uses-sdk
    android:minSdkVersion="10"          最低支持android版本
    android:targetSdkVersion="17" />    没任何意义的不用改了

<application
    ###这块是在列表里面显示用的
    android:allowBackup="true"  
    android:icon="@draw/ic_launcher" 图标应用的图标，就是在系统桌面上显示的那个图标
    android:label="@string/app_name" 这里的这个应用名字是系统download列表里面的那个应用名字，而系统桌面的那个在哪改？下面说明
    android:theme="@style/AppTheme" 主题 >

>

<activity
    ##这一组是在桌面上显示的时候的内容，如果没有设置继承自application
    android:name="包名.MainActivity"
    android:label="@string/app_name" 这个地方改的才是图标在桌面上显示的名字。
    android:icon="@drawable/photo2"  
    >
    <intent-filter>
        #决定安卓应用的入口这里是写死的
        <action android:name="不加com的包名.action.MAIN" />
        <category android:name="不加com的包名.category.LAUNCHER" />
    </intent-filter>
    ###哪个activity标签有这个标签哪个就是入口
</activity> 应用可能存在多个activity标签哪个有intent-filter哪个就是入口，如果没有intent-filter就没有办法进入的，桌面上也不会有应用图标的。




project.properties
    target=android-18 这个决定编译的版本。这个不能乱改的
修改的两种方式1右键项目然后properties->选择就行 2 直接改这来。



项目部署
程序打包的过程
当你run->先将整个项目编译然后在打包打包成APK{1 .dex 2 resources.arsc 3 资源的索引 未编译的资源（安卓里面所有的资源直接打包进来了没有编译）  4 清单file.xml}
->签名(版权保护)->正式安装
AndroidManifest 里面package防止别的公司恶意将其修改的和你一样把你的覆盖掉，采用一个签名，系统在确认是否要覆盖之前除了查看package之外还会去确认签名是否相同，这个签名是商业机密。这个没有办法知道。但是包名是可以知道的，当你在虚拟机上运行别人的apk你安装后运行可以在logCat里面获取到应用包名
例如com.itheima.hello/.MainActivity 这里就告诉你，运行的包和哪个Activity。
如果同包名，签名不同，低版本覆盖高版本都会报错的。

项目在部署的时候会产生一些Console内容，apk装到手机后会自动的删除apk的，安卓中的安装时不能选择安装路径的。
安卓系统的目录结构 windows->show view->other->android->File Explorer
应用装到 /data/app/这里来了第三方应用可以随便删除。
系统级别的应用安装到了/system/app/ 这里没有root权限是没有办法删除的。	
/data/data/系统中所有应用都会在这里生成一个对应的文件夹不关是否系统级的。这个文件夹名字就是包名，这个作用就是在程序运行时所产生的一些临时文件.系统为每一个应用产生的一个专属文件夹。这里不能跨文件夹访问资源的。

****在res里面的引用的时候都需要资源ID。
****引用的时候分为两种情况
1.在JAVA代码里面引用采用R.内部类.资源ID
2.在xml里面引用采用@内部类名字/alt+? 就会提示选个


Android 一个比较重要的工具
###DDMS
Dalvik debug monitor service	
Device里面显示的所有和你eclipse 或者是 android studio 链接的设备
设备下面列出的是所有运行在你手机上的进程，名字是应用包名
可以选择进程然后点击stop 关闭它。关键的那些进程是关不掉的，例如桌面进程，com.android.launcher 如果关闭会自动在起来。PID会不同关掉就起来。

Telephony status
speed是控制网速的，这个比如在做一些网络应用需要在比较卡的情况使用。
Incoming number: 名称
SMS 消息主体，就会往你的设备发送一条消息但是不可以发送中文,也不可以接收消息。
测试短信相关的功能
选择 Voice是通话，但是一打完电话就中断设备了这个时候，Devices那行上有个倒三角点击有个reset adb重启下 


//adb指令
全称是安卓调试桥（Android debug bridge）进程
作用就是建立eclipse 和 android 设备之间的连接。
eclipse 如果发现adb进程被杀掉了11秒会自动起来。
重启的最好的办法是杀进程等11秒，或者使用adb指令
adb kill-server 杀死
adb start-server 启动
启动或会告诉你端口等。

adb install apk(path) 往设备里面部署一个项目，注意就一个模拟器如果多个需要指定  -s 模拟器名字（例如：emulator-5554窗口左上角写着）

adb uninstall com.theadventus.apk (卸载的时候不能用APK名字了，需要用到清单里面的唯一标示的那个包名字) 卸载

adb install test.apk
adb uninstall com.theadventus.test 

adb devices 列出当前开发环境和安卓设备建立连接的列表。
adb shell 进入安卓的命令行(内核linux所以命令同例如 ls, cd, top, ps 等等)

在device里面罗列出来的是java的进程，而在android系统里面罗列出来的是全部的进程。

****只要运行adb指令如果没有启动adb进程就自己起来了不用非带运行adb start-server

windows 的指令
netstat -ano 当前启用端口的情况
杀死进程
taskkill -F -PID 进程ID


//第一个android的案例电话拨号
系统打电话设计到两个应用
1.拨号
2.打电话（这个是不能重写的）
这两个应用是彼此独立


1.
TextView 显示文本。
它跟随的那两个属性必须留着。
一个宽度一个高度在后面的地方用alt+?就可以显示其值 
match_parent和父节点一样(如果父节点是一个不存在的节点就是手机屏幕)
wrap_content是用包裹内容的大小，就是文子多大就多大。
这里也能成写dp单位

==================================
安卓中的这些布局中组件必须写宽高
===================================


2.文本框
<EditText
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
        
/>

3.按钮
<Button 
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="拨打电话"
        android:id="@+id/call" 手动加一个资源ID，好给src下的java引用 建立完毕后就会写入到R file 里面了。
        它会在R file 的 id 的那个内部类里面。
        @+id (这里的这个+一定不能少否则就错了)
        />

===所有的组件都对应的java类
Button call = (Button) findViewById(R.id.call); 

//侦听按钮 
/**
 * @author Administrator
 *
 */
public class MainActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //给按钮写个侦听事件
        Button bt = (Button) findViewById(R.id.call);
        bt.setOnClickListener(new MyOnClickListener());
    }

    class MyOnClickListener implements OnClickListener {

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			EditText tx = (EditText) findViewById(R.id.text_number);
			//获取用户输入的号码
			System.out.println(tx.getText().toString());
			
			//在一个应用启动另外一个应用
		    //告诉系统我们的动作，调用打电话的应用
			Intent intent = new Intent();//创建意图对象
			//动作封装到意图对象
			intent.setAction(intent.ACTION_CALL);
			//打给谁
			intent.setData(Uri.parse("tel:" + tx.getText().toString()));//这里必须要用tel:加起来告诉系统这是个电话。
			//把动作告诉系统 就是启动了一个打电话的应用
			startActivity(intent);//其实就是启动打电话那个系统的应用而已
			//这个地方代码没问题但是牵扯到了一个权限的问题，申请一下打电话权限用户同意就能打。
			
			
		}
    	
    }
    
}
    

关于钱的 隐私的都有权限问题，需要得到用户的许可
例如：
我call一个电话服务
所以申请一个打电话权限
怎么申请
到Android的清单中添加一条权限
AndroidManifest.xml添加（双击）选择permission add->uses permission->在下拉框中选择即可
在配置file中会自动添加<uses-permission android:name="android.permission.CALL_PHONE"/>

Android 事件
定义事件的三种情况
第一种
内部类
//这里的这个匿名内部类必须已经定义过这里相当于重写定义好的类且实例化
bt1.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				
			}
        	 
        });
或者在activity类里面定义一个内部类，然后实现监听接口，在在set...Listener(new 自定义内部类（实现接口的自定义内部类）)

第二种
使用this 但是activity类需要实现onclicklistener这个接口

第三种 *** 一般采用这种
<Button 
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="three"
        android:id="@+id/three"
        android:onClick="定义函数名例如aa"
        />
go to MainActivity.jar
在MainActivity类里面添加方法 public void aa(View v){

}
//注意这里必须这么写






//短信发送
android:lines="5" 可以调高EditText的高度
andorid:hint="这是提示"  是提示的意思
android:gravity="top"  文本框内容对齐方式
android:inputType="text" 设置表单的类型
它的这些是有限定的如果是android:inputType="number" 那么这个地方除了数字什么也输入不进去。 




//真实手机里面输入*#*#4636#*#* 会自动弹出来一个手机的信息

发短信也需要一个权限和电话一样老套路加一个全新到清单配置file中
查看LogCat的时候如果保存找自己的写的代码谷歌错误是因为你的错了

LogCat 如果多开模拟器一时段只能显示一个模拟器的信息，这个时候很简单找到device 双击某个设备 这个时候就能看到你双击这个设备的LOGCAT


public class MainActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);   
    }
    
    
    
    //这里不用intent 采用一种别的方式来实现，电话是因为访问不到api所以采用意图对象，然而短信是可以访问api所以就不用意图对象了。
    //采用事件的第三种模式
    public void sendMessage(View e){
    	//phone number
        EditText phoneNum = (EditText) findViewById(R.id.num);
        //message
        EditText message = (EditText) findViewById(R.id.message);
        //消息的获取
        String phoneNumStr = phoneNum.getText().toString();
        String messageStr = message.getText().toString();
        //发送短信
        SmsManager sm = SmsManager.getDefault();
        //发短信
        //对方号码  短信服务中心地址（真机 SMSC 在 *#*#4636#*#* 弹出菜单看也不指定 一般不指定，特殊情况需要指定，这个东西的意思就是比如北京给北京的短信服务中心那么来青岛就发不了了，这个一般自动获取null就行）短信的内容
        //sentIntent 是广播发送后，会有成功或失败的状态码，因为现在没学广播所以传个null就行
        //deliveryIntent 这也是个广播,你的消息被对方成功接收后的一个广播
        //sm.sendTextMessage(phoneNumStr, null, messageStr, null, null);
        
        
        //如果短信很长运行商默认只给了70个字符所以大字符串发不出去
        //这个时候可以考虑拆分字符分别发送
        //第二步开始拆分字符串 这个不用我们自己拆有现成的方法用
        ArrayList <String> list = sm.divideMessage(messageStr);
        for(String name : list){
        	sm.sendTextMessage(phoneNumStr, null, name, null, null);
        }
    }
}


//for 循环 集合类的另种写法
for(String name : list){
        	sm.sendTextMessage(phoneNumStr, null, name, null, null);
        }


//过滤器的概念 LogCat 
saved filters 会有不同的过滤器，如果查看所有的就all message




事件中的View e 解释
public class MainActivity extends Activity implements OnClickListener {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Button bt = (Button) findViewById(R.id.bt);
        //bt.setOnClickListener(new MyClass());
        /*bt.setOnClickListener(new OnClickListener(){

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				System.out.println("2");
			}
        	
        
        });*/
        //bt.setOnClickListener(this);
        
    }  
    class MyClass implements OnClickListener{

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			System.out.println("~~");
		}
    	
    }
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		System.out.println(3);
	}
	
	public void four(View v){
		System.out.println(4);
	}
	/**
	 * View详解
	 * 三个按钮的指向都指过来了，如果区分，使用View v来区分。
	 * View对象是系统传进来的，系统会把触发这个方法的那个组件作为View对象传进来。
	 * @param v
	 */
	public void five(View v){
		//通过对view对象的判断就可以知道用户点击的到底是哪一个对象。
		//v.getId();//使用getId来获取指向这个方法的那些按钮的 哪一个id的按钮。
		switch(v.getId()){
			case R.id.five_1:System.out.println("hi");;break;
			case R.id.five_2:System.out.println("hi2");;break;
		}
	}
}


<!-- 多个Button的click可以指向一个函数 -->
    <Button 
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="five"
        android:id="@+id/five_1"
        android:onClick="five"
        />
    <Button 
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="five"
        android:id="@+id/five_2"
        android:onClick="five"
        />







在android 中所有的布局标签都是VIEW 的子类
察看类的继承关系选择类F4







布局分为
线性布局(不会出现重叠)
这个只要将跟节点改为LinearLayout就可以了
如果还想竖向排列就根节点在里面加一个android:orientation="vertical"
Android 的集中布局
LinearLayout(线性布局)
FrameLayout(帧布局)
RelativeLayout(相对布局)
TableLyout(表格布局)
AbsoluteLayout(绝对布局)
这些名词并不是官方的翻译，是业界都这么叫。
1.linearLayout的一些特性
  1.默认是水平排列
  2.线性布局中他们彼此之间是不可能重叠的。
  3.在LinearLayout这个根节点上加入android:orientation="vertical"
    这个属性就带表垂直排列。
  4.默认组件左对齐 
  5.组件的属性例如TextView 这个组件 android:gravity 这个是控制组件
    内容的对齐方式，而android_layout_gravity这个是控制组件的对齐方式，center是竖直水平都居中，组件的对齐方式是相对屏幕讲的。内容的对齐是相对于组件。
  6.在竖直布局下(android:orientation="vertical")，左对齐、右对齐、水平居中生效
  7.水平布局下(android:orientation="horizontal")， 底部对齐、垂直居中对齐、顶部对齐 生效  
  8.关于6 7 记住两个点横向布局 纵向的生效，纵向布局横向的生效，这个线性布局的一个特点。
  9.在水平布局下，当有一个组件十分的长后面的组件可能会被顶到屏幕外边去。
  10.水平布局组件平分当前的屏幕，需要给每一个组件加入一个权重的属性，android:layout_weight="1" 。
  权重的作用是将屏幕按比例分配！剩余！宽度或者高度 例如讲 三个组件他们的权重是 1 1 1也就是总权重是三一人一份，如果是 1 2 3 那么将屏幕分成6分 第一个占1 第二个占2 第三个占3
   注意是剩余的大小按照比例分配已经占用的就占了。
  10.谷歌推荐在使用权重的时候搭配0dp来使用，这样会出现等比例分配的情况。
案例嵌套布局
  <!-- 使用google定义好的颜色 -->
  android:background="@android:color/background_light" 
  @android:color/holo_green_dark 将光标放到这个上面然后ctrl + 左键就可以看到相应的定义
  在layout 下的xml在预览模式的时候 上面第一个手机图标是可以选择分辨率的。

案例源代码
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context="com.example.linearylayout.MainActivity" >

    <LinearLayout 
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:orientation="horizontal"
        >
        <TextView 
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:background="#000000"
            />
        
        <TextView 
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:background="#ff0000"
            />
        
        
        <TextView 
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:background="#cccccc"
            />
        
         
        
        
        <TextView 
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:background="#f5f5f5"
            />
        
    </LinearLayout>
     
    <LinearLayout 
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:orientation="vertical"
        >
        
        <TextView 
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"
             android:background="#000000"
            />
        <TextView 
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"
             android:background="#f00000"
            />
        <TextView 
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"
             android:background="#cccccc"
            />
        <TextView 
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"
             android:background="@android:color/holo_green_dark" 
            />
        
    </LinearLayout>
     

</LinearLayout>

！！！总结重要特性
1.有一个布局方向 水平或者竖直
2.在竖直布局下，左对齐、右对齐、水平居中生效。
3.在水平布局下，顶部对齐，底部对齐，竖直居中生效。
4.权重：按比例分配屏幕的剩余宽度或者高度。


2.RelativeLayout(相对布局)
  1.相对布局没有权重
  2.相对布局没有方向（只有线性布局才有方向 方向说的是android:orientation="vertical"）
  3.默认是会产生叠加的，默认的组件方向是左对齐和顶部对齐 没有 layout_gravity。
  4.这里的方向是使用 android:layout_alignParentRight="true" 相对父元素的右边对齐。相对的纵向和横向是都可以对齐的，而线性布局是不可以的。
  底部对齐 android:layout_alignParentBottom="true"
  5.可以同时写对齐方式 例如：
    android:layout_alignParentRight="true"
    android:layout_alignParentBottom="true"

    android:layout_centerInParent="true" 相对父辈水平垂直居中
    android:layout_centerHorizontal="true" 相对父辈水平居中
    android:layout_centerVertical="true" 相对父辈垂直居中

  6.注意是相对于父元素而非屏幕
  7.对齐其他组件的位置，但是必须其它组件要设置id.
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa1"
        android:id="@+id/tv1"
        android:layout_toRightOf="@id/tv0"  当前这个组件要出现在id是tv1组件的右边。
        />
  

      相对位置 tv0 如果tv0 位于顶端。位于左上都会看不见因为出去了。
     <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa0"
        android:id="@+id/tv0"
        />
    
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa1"
        android:id="@+id/tv1"
        android:layout_toRightOf="@id/tv0"
        />
    
    
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa11"
        android:id="@+id/tv11"
        android:layout_above="@id/tv0"
        />
    
    
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa12"
        android:id="@+id/tv12"
        android:layout_below="@id/tv0"
        />
    
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa13"
        android:id="@+id/tv13"
        android:layout_toRightOf="@id/tv0"
        />
    
    <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa14"
        android:id="@+id/tv14"
        android:layout_toLeftOf="@id/tv0"
        />
       
        这个属性可以写多个
        android:layout_toRightOf="@id/tv0"
        <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa12"
        android:id="@+id/tv12"
        android:layout_toRightOf="@id/tv0" 位于第0个右边
        android:layout_above="@id/tv1" 位于第一个的上面 
        />

        android:layout_alignLeft="这里可以写和哪一个组件对齐" 例如：
        <TextView 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="aaa12"
        android:id="@+id/tv12"
        android:layout_below="@id/tv0"     位于tv0上方
        android:layout_alignLeft="@id/tv0" 和tv0左对齐
        />
        相对布局的宽度可以相对另一个组件的宽度
        例如相对于tv0 的 tv1        
        tv1 可以这么设置
        android:layout_above="@id/tv0"
        android:layout_alignLeft="@id/tv0"
        android:layout_alignRight="@id/tv0"
        这样同时设置alignLeft 和  alignRight 就可以保证拉伸的和tv0一样。

        


!!!总结!!!
组件默认位置顶部和左上角，组件之间是可以重叠的
可以相对父元素上下左右对齐，相对于父元素，水平居中、竖直居中、水平竖直居中
可以相对其他组件上下左右对齐
可以布局其他组件的上方下方右边和左边

对于父元素使用 alignParent 和 
        
 android:layout_centerInParent="true" 相对父辈水平垂直居中
    android:layout_centerHorizontal="true" 相对父辈水平居中
    android:layout_centerVertical="true" 相对父辈垂直居

相对于组件位置使用 只是相对组件ID
layout_above
layout_below
layout_toLeftOf toRightOf
相对组件对齐使用 值是相对组件的id
layout_alignLeft
layout_alignRight
layout_alignBottom Top

android:layout_toRightOf="@id/a5"
android:layout_alignParentRight="true"
当这么设置的时候按钮会被拉伸 因为位于a5右边而且又要对齐父辈右边所以拉伸了。


帧布局
这个只是在特定的情况下才能用到。有些特定情况必须用才用的到。
1.也是全部重叠在一起，相对布局的那些帧布局用不了
2.默认左对齐顶部对齐，和相对布局是一样的。
3.它设置对齐方式和线性布局一样 android:layout:gravity="right" 但是它没有线性布局那个框框，横向只能使用 左、右、居中 它全部可以用。
android:layout_gravity="right|bottom" 右对齐和底部对齐可以同时生效 
<TextView
        android:layout_width="240dp"
        android:layout_height="240dp"
        android:background="#f00000"
        android:layout_gravity="center"
        />
    <TextView
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:background="#cccccc"
        android:layout_gravity="center"
        />
    <TextView
        android:layout_width="160dp"
        android:layout_height="160dp"
        android:background="#eeeeee"
        android:layout_gravity="center"
        />
    <TextView
        android:layout_width="120dp"
        android:layout_height="120dp"
        android:background="#000000"
        android:layout_gravity="center"
        />
	<TextView
        android:layout_width="80dp"
        android:layout_height="80dp"
        android:background="#eeeeee"
        android:layout_gravity="center"
        />
	
	<TextView
        android:layout_width="40dp"
        android:layout_height="40dp"
        android:background="#ffffff"
        android:layout_gravity="center"
        />

所有的矩形居中然后叠加就可以显示。



表格布局 TableLayout 专门用来画表格的。
1.<TableRow></TableRow> 画行的
2.<TableRow>
这里有几个组件就有几列
</TableRow>
3.在做平分单元格的时候可以使用android:layout_weight
<TextView 
            android:layout_weight="1"
            android:text="1"
            />
        <TextView 
            android:layout_weight="1"
            android:text="2"
            />
        <TextView 
            android:layout_weight="1"
            android:text="3"
            />
4.TableLayout是唯一一个可以不定义宽高的布局的，因为定义了也没有用，定义了是没效的，也就说
<TableLayout>
<TableRow> 不设置宽高也没问题默认是 水平匹配父元素，高度包裹
<TextView android:text="aaa" />是没有问题的没有指定宽高。不设置默认横向纵向都是包裹。
</TableRow>
</TableLayout>
5.TableLayout 的属性android:stretchColumns="" 这个是设置拉伸列的这里写0是拉伸第0列，写1是拉伸第1列
6.分割线可以直接嵌在TableRow 下面
宽度是匹配父元素，而不是包裹了，因为直接写在了TableLayout 下面。写在TableRow里的是包裹宽度和高度
<TextView 
        android:layout_height="1dp"
        android:background="#000000"
        
        />
这个设置宽度没用高度有用
7.对齐方式使用android:grayity="right"
8.修改列的索引值  android:layout_column="1" 这个比较贱不能用提示死记。这样就不必去写那个空的android:text=" "的那一列了。
<TextView android:text="open" android:layout_column="1"/>
9.让当前列占用两列这个也没有提示。android:layout_span="2"

总结
1.TableRow 是行，子节点是一列
2.TableLayout的一级子节点默认宽都是和父节点一样宽
3.TableRow 子节点宽高都是包裹宽高所以可以不写。


绝对布局 AbsoluteLayout 上镜率很低，手机开发百分之一万年不会用到它。
1.它有一个android:layout_x android:layout_y 表示控件在哪个位置。
2.可以在预览的界面上拖拽控件，他的屏幕适配根本是没有办法做的。于是乎在软件开发是根本用不到的，电视的屏幕可以，因为分辨较少。	


===
所有的布局是可以嵌套的例如
linearLayout
    linearLayout
最常用的布局 线性布局、相对布局

可以在layout目录下创建多个布局file，到时候改改入口就可以 setContentView(R.layout.activity_main) 在layout下面建立file会被自动加入到R file在入口直接引用就可以变; 。



@+id 是定义id
@id  是引用id
===


Android中的推荐单位（当然px也是可以用的不推荐用）
dp 这个是长度单位
sp 这个是字体大小的单位

*******************************
一些注意
Android是不能有两个相同的属性的，如果需要一个属性有多个值可以用|分隔
例如
android:layout_gravity="center_horizontal|bottom"

===============
logcat 输出
===============
手机的调试输出的控制台。
1.控制输出的等级level
  在控制台上有个选项卡里面可以选择出处的等级
  verbose 冗余，最低级的logcat的信息               全部可以见
  debug   调试信息 Level D                         可以看到D I W E信息
  info    正常等级的信息，普通信息 Level I         可以看到I W E 信息
  warn    警告     Level W                         可以看到警告和错误信息
  error   错误信息 Level E                         只能看到错误信息
  assert  断言（这个不是等级）
仅仅靠这几个信息调试还是不够的可以使用，search 功能
直接搜关键字例如system.out.println("keyword") 直接搜keyword 这个搜索的是Text字段

主控制台上有很多字段
Level Time PID TID Application（应用包名，这个有时候会是空这是个BUG） Tag（用的最多，标签方便过滤信息的） Text 
可以使用过滤器过滤
左边的菜单栏点击+
Filter Name:  过滤name
通过下面不同字段过滤
by Log Tag   System.out 可以找到自己的输出
by Log Message
by PID
by Application Name
by Log Level

创建完毕后就出现过滤TAG然后选择就行，默认项目自带一个过滤器。

System.out.println的level默认的级别是改不了的就是info的级别

想打印别的等级的可以使用
//打印出来的是error级别的信息
Log.e("Tag字段的值" , "自定义信息")
Log.w(和上面一样)
log.i()
log.d()
log.v()
过滤的时候用Tag来过滤

=====================
!!!!!!!!!!!!!!!!
内部存储中写file
!!!!!!!!!!!!!!!!
=====================
1.安卓的存储空间，存储结构
  所有安卓都有两个存储空间 内部存储空间（自己的带的存储空间，这个是必须有的 
  RAM内存：运行的内存，相当于电脑的内存，ROM内存：存储内存（这个内部存储就是ROM），相当于电脑硬盘）
  和外部存储空间（SD卡可有可以没有，当相遇电脑的移动硬盘）
现在买的手机没有SD卡的直接告诉你你32G 16G其实这个是外部空间，而真正的内部空间是没有告诉你的。
到底存在哪是看需求的。

2.先搞内部存储
==在File Explorer 里面 可以看到安卓的file目录内部存贮在 /data/data/下面一大堆包是系统为每个应用提供的写到相应的应用里面
如果想看写入的file双击没用点击右上角的导出。
public void login(View v){
	  EditText et_username =  (EditText) findViewById(R.id.username);
	  EditText et_password =  (EditText) findViewById(R.id.password);
	  
	  CheckBox cb_ck = (CheckBox) findViewById(R.id.ck);
	  
	  String userName = et_username.getText().toString();
	  String password = et_password.getText().toString();
	  
	  if(cb_ck.isChecked()){//勾选了是true
		  //写到本地文件去 这就是内部存贮空间路径
		  File file = new File("data/data/com.theadventus.neibucunzhu/info.txt");
		  FileWriter fw = null;
		  try {
			fw = new FileWriter(file);
			fw.write(userName+"\r\n");
			fw.write(password+"\r\n");
		  } catch (IOException e) {
			// TODO Auto-generated catch block
			  
			e.printStackTrace();
		}finally{
			try {
				fw.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	  }
	  //吐司对话框弹出对话框API 第一个参数上下文对象 Activity 本身就是一个上下文对象所以传this 第二个参数提示消息内容 第三个参数过几秒消失Toast.LENGTH_LONG 5秒 Toast.LENGTH_SHORT 3秒 只能给这两个值不能有其它值
	  //这是创建还没有显示 所以要在后面show出来 Toast.LENGTH_SHORT 0 Toast.LENGTH_LONG 1可以直接传数字
	  //如果ctrl+鼠标左键没法看源码关联一下就可以去sdk下面的source关联一个版本就行
	  Toast.makeText(this, "提示消息", Toast.LENGTH_SHORT).show();
	 
   }
换行符号\r\n



自带的读取写目录api
getFileDir()返回写目录
返回一个File对象，其路径data/data/应用包名/files/ 都存在这个目录下面
File file = new File(getFilesDir(), null); 1获取写目录，2file name
getCacheDir()
目录是data/data/应用包名/cache/
当手机的存储空间不足的情况cache file夹下的内容就会被清除，所以存在这个目录下的东西可能被删掉。空间足就不删，但是不一定帮着删。所以需要自己写个清除程序。但重要的不要写在cache会被删。
清除数据，左键按住，会出现一个appinfo 进去clearcache cleardata 清缓存和清数据（包括缓存和数据全删，不可逆向） 


注意一点写只能写在自己应用下，不能写到别人的否则报没有权限
小知识点当你在file域中填写内容点击home键，再回来显示的还是你填写的内容，但是点击返回回来就清空了
BufferedReader ()这里面的可以是字符流也可以是字节流，字节流会转字符流
在变量上ctrl+1 可以选择第三个可以将变量设置为全局变量。然后在 oncreate方法初始化如果直接拷贝一个项目需要修改manifest.xml的应用报名否则和原来的会发生覆盖，修改Activity R file的引用，修改应用的名字否则还是重名修改values strings app_name
最后active外边的那个名字也要改掉rename

上下wen对象Context Toast.makeText第一个参数在哪个上下wen显示，2getFilesDir()上下wen对象 包装类的api获取存储路径的 3.按钮需要在上下wen 定义方法。
上下wen 类是Context Activity是上下wen,这些不同的上下wen，运行得到的结果是不同的。相当于“草”在不同的上下wen得到的意思是不同的


增加可阅读性，用组件的的名作为前缀例如 EditText 就是et_名字
EitText et_... = (EditText) findViewById(R.id....)

question
1.eclipse创建android项目，无法正常预览布局文件
http://jingyan.baidu.com/article/d621e8da0e0e052865913fae.html



ADT的下载
http://www.cnblogs.com/tc310/p/3938353.html


兼容的话做到2.3+以上


翻墙
无界限浏览器
自由门

